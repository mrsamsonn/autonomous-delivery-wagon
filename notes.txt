>>>>>>>>>>>>>>Jetson Nano<<<<<<<<<<<<<<<<<<<<<<<<<
---------------vscode w/ python---------------------
$ git clone https://github.com/JetsonHacksNano/installVSCode.git
$ cd installVSCode
./installVSCodeWithPython.sh
--------------- enable pwm pin 32 33 -------------------
Step 1: Enable PWM using busybox devmem

Run these as root (sudo su or prefix with sudo):

# Enable Pin 32 / PWM0
busybox devmem 0x700031fc 32 0x45
busybox devmem 0x6000d504 32 0x2

# Enable Pin 33 / PWM2
busybox devmem 0x70003248 32 0x46
busybox devmem 0x6000d100 32 0x00

Step 2: Control PWM via sysfs

cd /sys/devices/7000a000.pwm/pwm/pwmchip0
echo 0 > export  # For PWM0 (Pin 32) â€” use 2 for PWM2 (Pin 33)
cd pwm0
echo 20000000 > period        # 20ms period (50Hz)
echo 1500000 > duty_cycle     # 1.5ms pulse width (7.5% duty cycle)
echo 1 > enable

Step 3: Make Persistent with Crontab

To avoid running these commands manually after each reboot:

sudo crontab -e

Then add at the bottom:

@reboot sleep 10 && busybox devmem 0x700031fc 32 0x45 && busybox devmem 0x6000d504 32 0x2
@reboot sleep 10 && busybox devmem 0x70003248 32 0x46 && busybox devmem 0x6000d100 32 0x00

This ensures the pins are reconfigured correctly ~10 seconds after boot.
ðŸ§© Optional: Add to Script

(optional) shell script instead of crontab:

#!/bin/bash
# pwm_init.sh
busybox devmem 0x700031fc 32 0x45
busybox devmem 0x6000d504 32 0x2
busybox devmem 0x70003248 32 0x46
busybox devmem 0x6000d100 32 0x00

Then place it in /etc/rc.local or systemd service if needed.

>>>>>>>>>>>>>>>>>>>>>>>>>>> ROS <<<<<<<<<<<<<<<<<<<<<<<<<<<
Step 1: Install ROS Melodic

Run each command one at a time:

sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros-latest.list'

sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

sudo apt update
sudo apt install ros-melodic-desktop-full -y

Step 2: Environment Setup

Add ROS to your bash startup:

echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc

Then install ROS tools:

sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential -y

Initialize rosdep:

sudo rosdep init
rosdep update

Step 3: Create and Build Your Catkin Workspace

mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/
catkin_make

Add the workspace to your bash profile:

echo "source ~/catkin_ws/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc

---------------------Unitree LiDAR 4D L1 Setup-------------------------
Step 4: Clone the unilidar_sdk Repository

Navigate to the src directory in your catkin_ws:

cd ~/catkin_ws/src

Clone the unilidar_sdk repository:

git clone https://github.com/unitreerobotics/unilidar_sdk.git

[make sure to do sudo rm -rf ~unilidar_sdk_ros2]

Step 5: Install Dependencies

Before we can build the package, make sure the necessary dependencies are installed:

sudo apt update
sudo apt install ros-melodic-pcl-ros libpcl-dev libyaml-cpp-dev

Step 6: Build the Workspace

Go back to the root of your catkin_ws and build everything:

cd ~/catkin_ws
catkin_make

Source the setup file to set up the environment:

source devel/setup.bash

You can add source ~/catkin_ws/devel/setup.bash to your .bashrc to automatically source it every time.

Step 7: Configure the LiDAR

Next, we'll configure the unitree_lidar_ros package by specifying the correct port for the LiDAR:

    Find the correct serial port where the LiDAR is connected:

ls /dev/ttyUSB*

This will return the serial device for your LiDAR, such as /dev/ttyUSB0 or similar.

Modify the config.yaml file to specify the correct port. Open it using your editor (nano, vim, etc.):

nano ~/catkin_ws/src/unilidar_sdk/unitree_lidar_ros/config/config.yaml

[jetson@jetson-desktop:~/catkin_ws/src/unilidar_sdk/unitree_lidar_ros/src/unitree_lidar_ros/config$ nano config.yaml]

Modify the port value to match your LiDAR's serial port:

port: "/dev/ttyUSB0"  # Replace with your actual port

Save and close the file.

 Step 8: Run the Unitree LiDAR Driver

Youâ€™re almost there! Now, you can launch the LiDAR driver:

[reboot before launch]

[imu error fix] You can change the Fixed Frame to the imu frame unilidar_imu, so that you can view the IMU quaternion vector:

roslaunch unitree_lidar_ros run.launch
---------------------------------------------
----**If permission denied at launch**---
1. Verify and Ensure Proper Permissions for the Serial Device

    Identify your device:

    Run the following command to check your serial device:

ls /dev/ttyUSB*

This will show something like /dev/ttyUSB0, /dev/ttyUSB1, etc.

Check permissions:

Verify the permissions on the identified serial device (/dev/ttyUSB0 or others):

ls -l /dev/ttyUSB0

The output should look like this:

crw-rw---- 1 root dialout 188, 0 <timestamp> /dev/ttyUSB0

If the device is not assigned to the dialout group or has incorrect permissions, run:

    sudo chown root:dialout /dev/ttyUSB0
    sudo chmod 660 /dev/ttyUSB0

    After doing this, check again to make sure the serial port has the correct permissions.

    Reboot the system:

    If you made changes to the group or permissions, reboot your system to ensure the changes persist.

2. Confirm the dialout Group is Applied

Make sure that your user is still part of the dialout group:

groups jetson

This should list dialout as one of the groups. If it's not listed, add your user to the group again:

sudo usermod -aG dialout $USER

Then, log out and log back in, or reboot the system.
-------------------------------------------------
-------------------------------------------------

---------------------- Camera Node -------------------------
âœ… 1. Camera Node with Image Pipeline (C920 Mono Camera)

Install and run the ROS camera node:

sudo apt install ros-melodic-usb-cam
******
Make sure the ROS master is running:

roscore

Environment:
Run these in each terminal before launching ROS nodes:

source /opt/ros/melodic/setup.bash
source ~/catkin_ws/devel/setup.bash

You can also add them to your .bashrc:

echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
echo "source ~/catkin_ws/devel/setup.bash" >> ~/.bashrc
source ~/.bashrc

3. Check if the master URI is set

Make sure ROS_MASTER_URI is pointing to the correct machine (usually localhost if everything is on Jetson Nano):

export ROS_MASTER_URI=http://localhost:11311
export ROS_HOSTNAME=localhost

********
Then run:

rosrun usb_cam usb_cam_node

Check image stream:

rqt_image_view

Make sure the topic (usually /usb_cam/image_raw) is available.

Init Camera Node Steps:
1. If you're trying to stream the video into ROS (e.g., for a robot or CV pipeline):

Make sure your roscore is running (that previous error said it wasnâ€™t):

roscore

Then in a new terminal:

rosrun usb_cam usb_cam_node

And you can view the video with:

rqt_image_view

    If usb_cam is not installed, you can install it with:

sudo apt install ros-melodic-usb-cam

---------------------- LiDAR and Camera Fusion --------------------
make sure roscore is running
then do source ~/.bashrc
rosrun and roslaunch camera and lidar
rostopic echo /unilidar/cloud

prereq:
sudo apt install ros-melodic-cv-bridge ros-melodic-image-transport

>>>>>>>>>>>>>>>> Mono Camera [c920] <<<<<<<<<<<<<<<<<<<<<

view: 
gst-launch-1.0 v4l2src device=/dev/video0 ! image/jpeg, width=1920, height=1080, framerate=30/1 ! jpegdec ! videoconvert ! autovideosink

